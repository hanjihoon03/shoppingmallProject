# workflow의 이름을 지정
name: BackEnd - CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:
    #build를 진행할 운영체제
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        #JDK 버전 설정
      - name: Set up JDK 21 
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      # Gradle을 캐싱해둡니다 -> 빌드 속도가 증가하는 효과가 있습니다.
      - name: Gradle 캐싱
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # 프로젝트 저장소에 업로드하면 안되는 설정 파일들을 만들어줍니다.
      - name: Make application.yml
        run: |
          cd ./src/main
          mkdir -p resources
#           등록해둔 Github Secrets의 내용을 이용해서 yml 파일의 내용을 써줍니다.
          echo "$APPLICATION" > ./resources/application.yml
        env:
          APPLICATION: ${{ secrets.APPLICATION }}
        shell: bash

      - name: Gradle 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar
      # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.
      - name: zip file 생성
        run: |
          mkdir -p deploy
          cp ./appspec.yml ./deploy/
          cp ./*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy
      # AWS에 연결
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      #S3에 프로젝트를 업로드 한다.
      - name: S3에 프로젝트 업로드
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          ./spring-build.zip s3://project-app-bucket

      #CodeDeploy에 배포를 요청
      - name: Code Deploy 배포 요청
        run: |
          aws deploy create-deployment --application-name project-app \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name project-app \
            --s3-location bucket=project-app-bucket,bundleType=zip,key=spring-build.zip

